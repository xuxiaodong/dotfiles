*txt.txt*	Plugin for browsing plain text 

For Vim version 6.0 and above
<$Author: guoyoooping@163.com $>
<$Date: 2010/01/09 12:12:38 $>
<$Name: txt_1_0_5 $>

 1 Overview 					|txt-introduction|
 2 Element Definition				|txt-element|
 	2.1 Text title				|txt-title|
 	2.2 Text figure				|txt-figure|
 	2.3 Text table				|txt-table|
 	2.4 Text keywords			|txt-keywords|
 	2.5 Text url				|txt-url|
 	2.6 Text email				|txt-email|
 	2.7 Text quotes				|txt-quotes|
 	2.8 Text parentheses			|txt-parentheses|
 	2.9 Text bracket			|txt-bracket|
 3 Installation 				|txt-install|
 4 License 					|txt-license|
 5 Todo						|txt-todo|

==============================================================================
						*txt-introduction*
1. Overview~

The "Plain Text Browser" plugin is a plain text browser plugin for Vim. This
plugin allows you to efficiently browse through plain text files. The "Plain
Text Browser" plugin provides the following features:

    * Displays the tags (titles, figures, tables, etc.) defined in a file in a
      vertically or horizontally split Vim window.
    * Groups the tags by their type and displays them in a foldable tree.
    * Hightlight the key elements of a plain text, such elements include:
      keywords(such TODO, ERROR,etc), URLs, texts in bracket, etc.
    * When a tag of title or figure name is selected from the taglist window,
      positions the cursor at the begin of the title or gifure definitions.
    * The list of tags can be saved and then copied to write the content list.
    * Automatically highlights the current tag name.
    * The elemnet of the plain text can be modified easily.
    * Runs in both console/terminal and GUI versions of Vim
    * Can be used in both Unix and MS-Windows systems.
    * Other features in "taglist" plugin.

==============================================================================
2. Element Definition                              		*txt-element*

------------------------------------------------------------------------------
2.1 Text title                                  		*txt-title*

Lines start with "number." + SPACE is title with level 1, Lines start with
"number.number" + SPACE is title with level 2, Lines start with
"number.nbumer.number" + SPACE is title with level 3. Only 3 levels are
supported in the taglist windows with different ident. Please notice that
there should be no space before the title in the line. The following 3 level
title is defined, You could modify them to fit your own need.

--regex-txt=/^([0-9]+\.?[ \t]+)([^,]+$)/\1\2/c,content/
--regex-txt=/^(([0-9]+\.){1}([0-9]+\.?)[ \t]+)([^,]+$)/.   \1\4/c,content/
--regex-txt=/^(([0-9]+\.){2}([0-9]+\.?)[ \t]+)([^,]+$)/.       \1\4/c,content/

The The following is the defined for Text table in the file txt.vim, That is
for syntax highlight, You could modify them to fit your own need.

syn match txtTitle "^\(\d\+\.\)\+\s*[^,。，]\+$"
syn match txtTitle "^\([一二三四五六七八九十][、.]\)\+\s*[^,。，]\+$"
syn match txtTitle "^\d\s\+.\+\s*[^,。，]$"

For examples, The following line start with "1 Introduction" is defined as Text
title(level 1), and the line that start with "1.1 the history" is defined as
Text title(level2). They will be list in your vim taglist window with different
indent, and will be highlighted in your file:

1001. Test of title level 1

1001.1 Test of title level 2

1001.1.1 Test of title level 3

The element are used as both file structure and syntax highlight.

------------------------------------------------------------------------------
2.2 Text figure                                  		*txt-figure*

Lines start with any number of space and then the keyword "figure" and then num
is figure, for example, You should find the figure tag in the vim taglist
window.

The type of the figure is defined as the following, You could modify them to
fit your own need in the file .ctags.

--regex-txt=/^[ \t]+(figure[ \t]+[0-9a-zA-Z]+([.: ]([ \t]*.+)?)?$)/\1/f,figures/i
--regex-txt=/^[ \t]*(图[ \t]*[0-9a-zA-Z]+[.: ][ \t]*.+$)/\1/f,figures/i

For examples, The following lines start with "Figure 1: Example Message Flow"
is defined as Text figure and will be list in your vim taglist window:

           |  F1 MESSAGE          |                         |
           |--------------------> |  F2 MESSAGE             |
           |                      | ----------------------->|
           |                      |  F3 200 OK              |
           |                      | <-----------------------|
           |  F4 200 OK           |                         |
           |<-------------------- |                         |
           |                      |                         |
        User 1                  Proxy                    User 2

                   Figure 1: Example Message Flow

The element are used as file structure.

------------------------------------------------------------------------------
2.3 Text table                                  		*txt-table*

text start with \t or space and then the keyword "table" and then num is
table, for example, You should find the table tag in the vim taglist window.

The following is the defined for Text table in the file .ctags, You could
modify them to fit your own need.

--regex-txt=/^[ \t]+(table[ \t]+[0-9a-zA-Z]+([.: ]([ \t]*.+)?)?$)/\1/t,tables/i
--regex-txt=/^[ \t]*(表[ \t]*[0-9a-zA-Z]+[.: ][ \t]*.+$)/\1/t,tables/i

For examples, The following lines start with "Table 1: Summary of header
fields, A--O" is defined as Text table and will be list in your vim taglist
window:

                   Header Field       where  proxy  MESSAGE
                   __________________________________________
                   Accept               R              -
                   Content-Encoding                    o
                   Max-Forwards        R      amr      m
                   Organization               ar       o

                   Table 1: Summary of header fields, A--O

The element are used as file structure.

------------------------------------------------------------------------------
2.3 Text keywords                                  		*txt-keywords*

The following words are defined as keywords. You can Add your own keywords in
the following lines in the file txt.vim.

syn keyword txtTodo todo fixme note debug comment notice
syn keyword txtError error bug caution dropped

The element are used as systax highlight.

------------------------------------------------------------------------------
2.4 Text url                                  		*txt-url*

The url and uri is defined as text url. Please refer to rfc1738(Uniform
Resource Locators (URL)) and rfc3986(Uniform Resource Identifier (URI):
Generic Syntax) for url's and uri's definitions.

For example:

	guoyoooping@163.com
	www.pmtv.wordpress.com
	ftp://192.168.1.5/ftpboot/username/example.txt

The element are used as systax highlight.

------------------------------------------------------------------------------
2.5 Text email                                  		*txt-email*

Keywords that in email are defined as text email:

syn match txtEmailMsg
'^\s*\(From\|De\|Sent\|To\|Para\|Date\|Data\|Assunto\|Subject\):.*'
syn match txtEmailQuote '^\(>\($\| \)\)\+'

For example, Please note these keyword From, Sent, To and Subject:

	From: San Zhang(R&D Center Beijing) 
	Sent: 2008年11月27日 13:17
	To: Si Li, Wu Wang, Liu Chen
	Subject: RE: 你们都不踢球?

The element are used as systax highlight.

------------------------------------------------------------------------------
2.6 Text quotes                                  		*txt-quotes*

Words in single quotation marks and double quotation marks are defined as text
quotes. The following is the definition, you could modify them to fit your own
need.

Definition:

syn match   txtQuotes     '["“][^"”]\+\(\n\)\=[^"”]*["”]'hs=s+1,he=e-1

For examples:

	"good example"

The element are used as systax highlight.

------------------------------------------------------------------------------
2.7 Text parentheses                                 	*txt-parentheses*

Words in parentheses are defined as text parentheses.

Definition:

syn match   txtParentesis "[(（][^)）]\+\(\n\)\=[^)）]*[)）]" contains=txtUrl

For examples:

	(good example)

The element are used as systax highlight.

------------------------------------------------------------------------------
2.8 Text bracket                                  		*txt-bracket*

Words in bracket marks defined as text bracket.

Definition is list as the following, you could modify to fit your need:

syn match txtBrackets     '<[^<]\+\(\n\)\=[^<]*>'hs=s+1,he=e-1 contains=txtUrl
syn match txtBrackets     '\[[^\[]\+\(\n\)\=[^\[]*\]'hs=s+1,he=e-1 contains=txtUrl
syn region txtBrackets    matchgroup=txtOperator start="{"        end="}" contains=txtUrl

For examples:

	<good example>
	[good example]
	{good example}

The element are used as systax highlight.

------------------------------------------------------------------------------
2.9 Text list                                  		*txt-list*

Lines that start with some spaces and then the symbol "*"(or the symbol "-" or
the digit and then the symbol ")") and text.

Definition is list as the following, you could modify to fit your need:

syn match txtList    '^\s*[-+*.] [^ ]'me=e-1
syn match txtList    '^\s*(\=\([0-9]\+\|[a-zA-Z]\))'
syn match txtList "^\s\+\d\+\.\d\@!"

For examples:

        - item1: this is the first item.
        + item1: this is the first item.
        * item1: this is the first item.
        . item2: this is the second item.
        3)item3: this is the third item.
        a)item3: this is the third item.
        5.item3: this is the third item.

The element is used as systax highlight.

==============================================================================
3. Installation~ 					*txt-install*

1) Please make sure your taglist script have been installed and could work
properly. If not, please refer to vimscript #273: taglist.vim.

2) Download the txt.zip file and unzip the files and then copy the txt.vim to
the $HOME/.vim/syntax(in linux), or the $HOME/vimfiles/syntax(in Windows),
and copy the file .ctags to $HOME/, After this step, you should have the
following two files:

$HOME/.vim/syntax/txt.vim - syntax for plain/text.
$HOME/.ctags - language definition of Exuberant Ctags for txt.

3) Add the following line into your .vimrc file.

syntax on "syntax highlighting on
"language definition for plain text
let tlist_txt_settings = 'txt;c:content;f:figures;t:tables'
au BufRead,BufNewFile *.txt setlocal ft=txt "syntax highlight for txt.vim

4) Restart Vim and you can now use the ":TlistToggle" command to open/close
the taglist window for your plain text.  

If you want to combine this plugin with other text plugin(take vimscript #2208:
txtfmt as example), You could simply added the following 2 autocommands
to your .vimrc after the line `setlocal ft=txt' as described above:

au BufRead,BufNewFile *.txt runtime ftplugin/txtfmt.vim
au BufRead,BufNewFile *.txt runtime syntax/txtfmt.vim 

To uninstall the taglist plugin, remove the plugin/taglist.vim and
doc/taglist.txt files from the $HOME/.vim or $HOME/vimfiles directory.

==============================================================================
4. License~ 						*txt-license*

Permission is hereby granted to use and distribute the "Plain Text Browser"
plugin, with or without modifications, provided that this copyright notice is
copied with it. Like anything else that's free, "Plain Text Browser"
plugin.vim is provided *as is* and comes with no warranty of any kind, either
expressed or implied. In no event will the copyright holder be liable for any
damamges resulting from the use of this software.

==============================================================================
5. Todo~						 *txt-todo*

1) On Windows(cygwin and linux works well), If the filename or directory name
   has CJK(Chinese tested only) chars, the taglist couldn't be shown. It might
   be the taglist plugin's bug because the C taglist doesn't work too.

2) Sometime when the enc and fenc of the file are different, The taglist might
   not be shown correctly. To solve the problems, please make sure they are the
   same. 

3) Support for displaying tags in a modified (not-yet-saved) file. 

==============================================================================

